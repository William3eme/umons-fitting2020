__BRYTHON__.VFS_timestamp = 1592938536534
__BRYTHON__.use_VFS = true
var scripts = {"$timestamp": 1592938536533, "browser": [".py", "", [], 1], "browser.widgets": [".py", "", [], 1], "browser.widgets.dialog": [".py", "from browser import console,document,html,window\n\nstyle_sheet=\"\"\"\n:root {\n    --brython-dialog-font-family: Arial;\n    --brython-dialog-font-size: 100%;\n    --brython-dialog-bgcolor: #fff;\n    --brython-dialog-border-color: #000;\n    --brython-dialog-title-bgcolor: CadetBlue;\n    --brython-dialog-title-color: #fff;\n    --brython-dialog-close-bgcolor: #fff;\n    --brython-dialog-close-color: #000;\n}\n\n.brython-dialog-main {\n    font-family: var(--brython-dialog-font-family);\n    font-size: var(--brython-dialog-font-size);\n    background-color: var(--brython-dialog-bgcolor);\n    left: 10px;\n    top: 10px;\n    border-style: solid;\n    border-color: var(--brython-dialog-border-color);\n    border-width: 1px;\n    z-index: 10;\n}\n\n.brython-dialog-title {\n    background-color: var(--brython-dialog-title-bgcolor);\n    color: var(--brython-dialog-title-color);\n    border-style: solid;\n    border-color: var(--brython-dialog-border-color);\n    border-width: 0px 0px 1px 0px;\n    padding: 0.4em;\n    cursor: default;\n}\n\n.brython-dialog-close {\n    float: right;\n    background-color: var(--brython-dialog-close-bgcolor);\n    color: var(--brython-dialog-close-color);\n    cursor: default;\n    padding: 0.1em;\n}\n\n.brython-dialog-panel {\n    padding: 0.6em;\n}\n\n.brython-dialog-message {\n    padding-right: 0.6em;\n}\n\n.brython-dialog-button {\n    margin: 0.5em;\n}\n\"\"\"\n\n\nclass Dialog(html.DIV):\n ''\n\n\n\n\n\n \n \n def __init__(self,title=\"\",*,\n top=None ,left=None ,ok_cancel=False ,default_css=True ):\n  if default_css:\n   for stylesheet in document.styleSheets:\n    if stylesheet.ownerNode.id ==\"brython-dialog\":\n     break\n   else :\n    document <=html.STYLE(style_sheet,id=\"brython-dialog\")\n    \n  html.DIV.__init__(self,style=dict(position=\"absolute\"),\n  Class=\"brython-dialog-main\")\n  \n  self.title_bar=html.DIV(html.SPAN(title),Class=\"brython-dialog-title\")\n  self <=self.title_bar\n  self.close_button=html.SPAN(\"&times;\",Class=\"brython-dialog-close\")\n  self.title_bar <=self.close_button\n  self.close_button.bind(\"click\",self.close)\n  self.panel=html.DIV(Class=\"brython-dialog-panel\")\n  self <=self.panel\n  \n  if ok_cancel:\n   ok_cancel_zone=html.DIV(style={\"text-align\":\"center\"})\n   ok,cancel=\"Ok\",\"Cancel\"\n   if isinstance(ok_cancel,(list,tuple)):\n    if not len(ok_cancel)==2:\n     raise ValueError(\n     f\"ok_cancel expects 2 elements, got {len(ok_cancel)}\")\n    ok,cancel=ok_cancel\n   self.ok_button=html.BUTTON(ok,Class=\"brython-dialog-button\")\n   self.cancel_button=html.BUTTON(cancel,\n   Class=\"brython-dialog-button\")\n   self.cancel_button.bind(\"click\",self.close)\n   ok_cancel_zone <=self.ok_button+self.cancel_button\n   self <=ok_cancel_zone\n   \n  document <=self\n  cstyle=window.getComputedStyle(self)\n  \n  \n  if left is None :\n   width=round(float(cstyle.width[:-2])+0.5)\n   left=int((window.innerWidth -width)/2)\n  self.left=left\n  self.style.left=f'{left}px'\n  if top is None :\n   height=round(float(cstyle.height[:-2])+0.5)\n   top=int((window.innerHeight -height)/2)\n   \n  top +=document.scrollingElement.scrollTop\n  self.top=top\n  self.style.top=f'{top}px'\n  \n  self.title_bar.bind(\"mousedown\",self.mousedown)\n  self.title_bar.bind(\"touchstart\",self.mousedown)\n  self.title_bar.bind(\"mouseup\",self.mouseup)\n  self.title_bar.bind(\"touchend\",self.mouseup)\n  self.bind(\"leave\",self.mouseup)\n  self.is_moving=False\n  \n def close(self,*args):\n  self.remove()\n  \n def mousedown(self,event):\n  document.bind(\"mousemove\",self.mousemove)\n  document.bind(\"touchmove\",self.mousemove)\n  self.is_moving=True\n  self.initial=[self.left -event.x,self.top -event.y]\n  \n  event.preventDefault()\n  \n def mousemove(self,event):\n  if not self.is_moving:\n   return\n   \n   \n  self.left=self.initial[0]+event.x\n  self.top=self.initial[1]+event.y\n  \n def mouseup(self,event):\n  self.is_moving=False\n  document.unbind(\"mousemove\")\n  document.unbind(\"touchmove\")\n  \n  \nclass EntryDialog(Dialog):\n ''\n\n\n\n\n\n\n\n\n\n \n \n def __init__(self,title,message=None ,*,\n top=None ,left=None ,default_css=True ):\n  Dialog.__init__(self,title,\n  top=top,left=left,ok_cancel=True ,\n  default_css=default_css)\n  self.message=html.SPAN(message,Class=\"brython-dialog-message\")\\\n  or \"\"\n  self.entry=html.INPUT()\n  self.panel <=self.message+self.entry\n  self.entry.focus()\n  \n  self.entry.bind(\"keypress\",self.callback)\n  self.ok_button.bind(\"click\",self.callback)\n  \n @property\n def value(self):\n  return self.entry.value\n  \n def callback(self,evt):\n  if evt.target ==self.entry and evt.keyCode !=13:\n   return\n  self.dispatchEvent(window.Event.new(\"entry\"))\n  \nclass InfoDialog(Dialog):\n ''\n \n def __init__(self,title,message,*,\n top=None ,left=None ,default_css=True ,\n remove_after=None ,ok=False ):\n  ''\n  \n  Dialog.__init__(self,title,\n  top=top,left=left,default_css=default_css)\n  self.panel <=html.DIV(message)\n  if ok:\n   ok=ok if isinstance(ok,str)else \"Ok\"\n   self.ok_button=html.BUTTON(ok,Class=\"brython-dialog-button\")\n   self.panel <=html.P()\n   self.panel <=html.DIV(self.ok_button,\n   style={\"text-align\":\"center\"})\n   self.ok_button.bind(\"click\",lambda ev:self.remove())\n  if remove_after:\n   if not isinstance(remove_after,(int,float)):\n    raise TypeError(\"remove_after should be a number, not \"+\n    str(remove_after.__class__.__name__))\n   window.setTimeout(self.close,remove_after *1000)\n", ["browser.html", "browser.document", "browser.window", "browser", "browser.console"]], "browser.html": [".py", "from _html import *\n", ["_html"]]}
__BRYTHON__.update_VFS(scripts)